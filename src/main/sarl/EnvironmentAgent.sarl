import io.sarl.core.Logging
import io.sarl.core.Initialize
import java.util.TreeMap
import tx52.environment.Environment
import tx52.environment.EnvironmentListener

/**
 * 
 */

/**
 * @author Olivier
 *
 */
agent EnvironmentAgent {
	
	uses Logging
	var Environment = new Environment
	var listeners = <EnvironmentListener>newArrayList
	var time =0
	val actions = <environmentChangeQuery>newLinkedList
	
	on Initialize{
		println("\nTest")
		fireEnvironmentChange
	}
	
	def fireEnvironmentChange {
		var objects = new TreeMap<Point,EnvironmentObject>
		for (obj : getEnvironmentObjects) {
				objects.put(obj.position,obj)
		}
		var ^event = new EnvironmentEvent (ID, this.time, mapWidth, mapHeight, Collections::unmodifiableMap(objects))
		for (listener : this.listeners) {
			listener.EnvironmentChanged(^event)
		}
	}
	
	//initialize the turn (update world state, give perceptions to AI, fire all the agents, *increase time) *or in endOfStep 
	on RunBeginingOfStep {
		synchronized(this){
			
		}
	}
	// update world state, update the position of all objects, move to next step
	on RunEndOfStep {
		synchronized(this) {
			
		}
	}
	def fireGameOver {
		for (listener : this.listeners) {
			listener.gameOver()
		}
	}
}