package ^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.lang.core.Address
import io.sarl.util.Scopes
import java.util.UUID
import java.util.concurrent.LinkedBlockingDeque
import vi51.environment.EnvironmentChangeQuery
import vi51.environment.EnvironmentListener
import vi51.util.ConstantContainer
import vi51.util.Semantic

/**
 * @author Olivier
 * 
 */

agent EnvironmentAgent { 
	
	uses DefaultContextInteractions
	uses MapManager, TimeManager
	
	var listeners = <EnvironmentListener>newArrayList
	val actions = new LinkedBlockingDeque <EnvironmentChangeQuery>
	var adr : Address
	var spaceID : UUID  
	var countInit = 0
	val agentNumber = ConstantContainer.NB_AGENTS

	on Initialize{
		
		setSkill(typeof(TimeManager),new DefaultTimeManager)
		
		spaceID = defaultSpace.getID.getID
		adr=defaultSpace.getAddress(this.ID)
		
		setSkill(typeof(MapManager), new DefaultMapManagerSkill(ConstantContainer.MAP_WIDTH,ConstantContainer.MAP_HEIGHT))
		createMapSurroundings 
		//we create the objects -> need to link the agents
		for (var i=0;i<agentNumber;i++) {
			spawnAgent(spaceID,this.getID,Visitor,ConstantContainer.BASIC_PERCEPTION_DISTANCE,Semantic.Visitor)
//			spawnAgent(spaceID,this.getID,BodyGuard,ConstantContainer.BASIC_PERCEPTION_DISTANCE,2)
		}
		
		updateWindow //mis a jour de la vue utilisateur
		
	}
	
	on agentReady {
		synchronized(this) {
			countInit++
			if(countInit==agentNumber){
				emit(new RunBeginingOfStep,Scopes::addresses(adr))
			}
			
		}
	}
	
	on Influence [occurrence.time >= time] { 
		
		synchronized(this) {
			
			if(occurrence instanceof MotionInfluence){
				this.actions.add(new EnvironmentChangeQuery(occurrence.source.getUUID,occurrence.vector,ConstantContainer.MOTION_TYPE)) 
			}else if (occurrence instanceof ShootInfluence){
				this.actions.add(new EnvironmentChangeQuery(occurrence.source.getUUID,occurrence.target,ConstantContainer.SHOOT_TYPE))
			}
			
			if (this.actions.size >= bodyCount) {
				emit(new RunEndOfStep,Scopes::addresses(adr))
			}
		}
	}

	/** 
	* initialize the turn (update world state, give perceptions to AI, fire all the agents, *increase time) *or in endOfStep 
	*/
	on RunBeginingOfStep {
		
		

		synchronized(this){

				this.actions.clear()
				
				startTimeCount()
				
				sendPerceptions(getTime) // Perception computation
				
			
		}
	}
	
	/**
	 * 
	 * update world state, update the position of all objects, move to next step
	*/	
	on RunEndOfStep {
		
		synchronized(this) {

			while(SpawnButtonRequestA){
				spawnAgent(spaceID,this.getID,Visitor,ConstantContainer.BASIC_PERCEPTION_DISTANCE,Semantic.Visitor)
			}
			while(SpawnButtonRequestB){
				spawnAgent(spaceID,this.getID,BodyGuard,ConstantContainer.BASIC_PERCEPTION_DISTANCE,Semantic.BodyGuard)
			}
			while(SpawnButtonRequestC){
				spawnAgent(spaceID,this.getID,Terrorist,ConstantContainer.BASIC_PERCEPTION_DISTANCE,Semantic.Zombie)
			}
			if(time%10==0){
//				spawnAgent(spaceID,this.getID,Visitor,ConstantContainer.BASIC_PERCEPTION_DISTANCE,Semantic.Visitor)
//				spawnAgent(spaceID,this.getID,BodyGuard,ConstantContainer.BASIC_PERCEPTION_DISTANCE,2)
			}
			

			resolveInfluences(actions)		
			updateTree

			updateWindow 

			TimeStep
			WaitUntilEndOfStep
			emit(new RunBeginingOfStep,Scopes::addresses(adr))
		}
	}
	
	
	def fireGameOver {
		for (listener : this.listeners) {
			listener.gameOver()
		}
	}
	
	
}