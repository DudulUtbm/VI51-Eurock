package ^agent

import Behaviour.KinematicSeekBehaviour
import Behaviour.KinematicWanderBehaviour
import Behaviour.SeekBehaviour
import Behaviour.WanderBehaviour
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.UUID
import org.arakhne.afc.math.continous.object2d.Circle2f
import vi51.environment.Perceivable
import vi51.util.ConstantContainer
import vi51.util.Semantic

/**
 * @author Dudul
 *
 */
agent Terrorist extends AbstractAnimat {

	uses  Lifecycle
	
	var seekBehaviour : SeekBehaviour
	var wanderBehaviour : WanderBehaviour
	
	
	  
	on Initialize{
		super._handle_Initialize_0(occurrence) 
	}
	
	on Perception{

		var body = occurrence.body
		var target : Perceivable = null
		var radius = new Circle2f(body.position,ConstantContainer.PRIVATE_RADIUS)
		
		if(occurrence.objects.size()>0){
			for(object : occurrence.objects){
				if((object.getType.equals(Semantic.Visitor)) || (object.getType.equals(Semantic.BodyGuard)) && (body.getPosition.distance(body.getBox.getClosestPointTo(object.getPosition)) < radius.radius)){
					if (target == null){
						target = object
					}
					else if (body.getPosition.distance(target.position) > body.getPosition.distance(object.position)){
						target = object
					}
				}
			}
			if (target!=null){
				this.seekBehaviour = new KinematicSeekBehaviour
				var o = this.seekBehaviour.runSeek(
					body.position,
					body.currentLinearMotion.length,
					body.maxLinearSpeed,
					target.position
					)
				o.emitInfluence(occurrence.time)
				if(body.getPosition.distance(target.position) < ConstantContainer.ZOMBIE_RANGE){
					influenceAttack(occurrence.time,target.getBodyID)
				}
			}else{
				this.wanderBehaviour = new KinematicWanderBehaviour
				var o = this.wanderBehaviour.runWander(
					body.position,
					body.currentLinearMotion,
					body.currentLinearMotion.length,
					body.maxLinearSpeed,
					body.currentAngularSpeed,
					body.maxAngularSpeed
					)
				o.emitInfluence(occurrence.time)
			}
		}else{
			this.wanderBehaviour = new KinematicWanderBehaviour
			var o = this.wanderBehaviour.runWander(
				body.position,
				body.currentLinearMotion,
				body.currentLinearMotion.length,
				body.maxLinearSpeed,
				body.currentAngularSpeed,
				body.maxAngularSpeed
				)
			o.emitInfluence(occurrence.time)
		}
		//doNothing
	}

}