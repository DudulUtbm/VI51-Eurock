package ^agent

import Behaviour.KinematicSeekBehaviour
import Behaviour.KinematicWanderBehaviour
import Behaviour.SeekBehaviour
import Behaviour.WanderBehaviour
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.HashMap
import org.arakhne.afc.math.continous.object2d.Point2f
import vi51.util.ConstantContainer
import vi51.util.Variation

/**
 * @author Dudul
 *
 */
agent Visitor extends AbstractAnimat {

	uses  Lifecycle
	
	var seekBehaviour : SeekBehaviour
	var wanderBehaviour : WanderBehaviour
	
	var listenMusic = ConstantContainer.BASIC_MUSIC_DESIRE
	var drink = ConstantContainer.BASIC_THIRSTY
	var hungry = ConstantContainer.BASIC_HUNGRY
	var pee = ConstantContainer.BASIC_PEE
	
	var actionMapping : HashMap<String,Variation>
	  
	on Initialize{
		super._handle_Initialize_0(occurrence)
	}
	
	on Perception{
		var body = occurrence.body
		var target : Point2f = null
		if(occurrence.objects.size()>0){
			for (object : occurrence.objects){
				if (object.getName.equals("Scene1")){
					target = object.getPosition()
				}
			}
			if(target!=null){
				this.seekBehaviour = new KinematicSeekBehaviour
				var o = this.seekBehaviour.runSeek(
					body.position,
					body.currentLinearMotion.length,
					body.maxLinearSpeed,
					target
				)
				o.emitInfluence(occurrence.time)
			}else{
				this.wanderBehaviour = new KinematicWanderBehaviour
				//position : Point2f, orientation : Vector2f, linearSpeed : float, maxLinear : float, angularSpeed : float, maxAngular : float
				var o = this.wanderBehaviour.runWander(
				body.position,
				body.currentLinearMotion,
				body.currentLinearMotion.length,
				body.maxLinearSpeed,
				body.currentAngularSpeed,
				body.maxAngularSpeed
				)
				o.emitInfluence(occurrence.time)
			}
		}else{
			this.wanderBehaviour = new KinematicWanderBehaviour
			//position : Point2f, orientation : Vector2f, linearSpeed : float, maxLinear : float, angularSpeed : float, maxAngular : float
			var o = this.wanderBehaviour.runWander(
			body.position,
			body.currentLinearMotion,
			body.currentLinearMotion.length,
			body.maxLinearSpeed,
			body.currentAngularSpeed,
			body.maxAngularSpeed
			)
			o.emitInfluence(occurrence.time)
		}
		
		
	}
}