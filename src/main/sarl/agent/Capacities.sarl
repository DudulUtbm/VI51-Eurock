package ^agent

import io.sarl.lang.core.Agent
import java.util.ArrayList
import java.util.UUID
import java.util.concurrent.LinkedBlockingDeque
import org.arakhne.afc.math.continous.object2d.Point2f
import org.arakhne.afc.math.continous.object2d.Vector2f
import vi51.environment.AgentBody
import vi51.environment.EnvironmentChangeQuery
import vi51.environment.Perceivable
import vi51.environment.RTree
import vi51.util.Actions
import vi51.util.Semantic
import vi51.util.Variation

/**
 * @author Olivier
 *
 */
 
 /** Capacity to manage the map */
capacity MapManager {
	/** Replies the number of bodies in the map */
	def getBodyCount : int
	
	/** execute the list of influences 
	 * 	@return true if game is over? *TBD* */
	def resolveInfluences (actions : LinkedBlockingDeque<EnvironmentChangeQuery>) : boolean
	
	/** replies the perceptions */
	def sendPerceptions (time : float)
	
	/** replies the width of the map. */
	def getMapWidth : float
	
	/** replies the height of the map. */
	def getMapHeight : float
	
	/** replies all the objects */
	def getAllObjects : RTree
	
	/** Replies a specific body */
	def getAgentBody(id : UUID) : AgentBody
	
	/** Create basic Unit */
	def createUnit(perceptionDistance : float, type: Semantic) : AgentBody
	
	def spawnAgent (spaceID : UUID, environmentID : UUID,agentType : Class<? extends Agent>,perceptionDistance : float,type : Semantic) : UUID
	
	/** Create the map surroundings walls */
	def createMapSurroundings
	
	def updateTree
	
	def RunJbox
	
	def printTree
	
	// GUI related
	def updateWindow
	
	def SpawnButtonRequestA : boolean
	
	def SpawnButtonRequestB : boolean
	
	def SpawnButtonRequestC : boolean
	
	def test
	
}

/**
 * capacity that agent uses to send influence
 */
capacity PhysicEnvironment {
	
	/** Invoked to send the influence to the environment.
	 * 
	 * @param linearInfluence is the linear influence to apply on the object.
	 * @param angularInfluence is the angular influence to apply on the object.
	 */
	def influenceKinematic(linearInfluence : Vector2f = null, angularInfluence : float = 0f,time : float = 0f)
	
	def influenceAttack (time : float = 0f,target : UUID = null)
	
	def PrivateZone(position : Point2f, liste : ArrayList<Perceivable>,velocity : Vector2f, targetType : Semantic) : Vector2f
}

capacity TimeManager{
	/**
	 * manage the time
	 */
	
	def startTimeCount

	def TimeStep
	
	def WaitUntilEndOfStep
	
	def getTime : float
}

capacity DesireManager{
	/**
	 * manage the desire of an agent
	 */
	 def addVariation(v : Variation) : Variation
	 
	 def applyVariation(a : Actions)
	 
	 def chooseBestBasedOnAverageValue : Actions
	 
	 def chooseBestBasedOnMaxValue : Actions
	 
	 def computeAverageValue(values : Variation) : int
}