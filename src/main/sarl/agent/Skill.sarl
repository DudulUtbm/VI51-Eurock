package ^agent

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.util.OpenEventSpace
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.List
import java.util.Random
import java.util.UUID
import java.util.concurrent.LinkedBlockingDeque
import org.arakhne.afc.math.continous.object2d.Vector2f
import org.jbox2d.common.Vec2
import vi51.environment.AgentBody
import vi51.environment.Environment
import vi51.environment.EnvironmentChangeQuery
import vi51.environment.EnvironmentEvent
import vi51.environment.EnvironmentObject
import vi51.environment.RTree
import vi51.environment.StaticObject
import vi51.gui.Window
import vi51.util.AddressUUIDScope
import vi51.util.ConstantContainer
import vi51.util.Actions
import vi51.util.Variation
import vi51.util.Variation
import vi51.util.Actions
import java.util.HashMap

skill StandardPhysicEnvironment implements PhysicEnvironment { 

	uses DefaultContextInteractions, Behaviors

	val spaceID : UUID
	val environmentID : UUID
	var physicSpace : OpenEventSpace
	var myAdr : Address

	new (spaceID : UUID, environmentID : UUID) {
		this.environmentID = environmentID
		this.spaceID = spaceID
	}

	override install {  
		do {
			this.physicSpace = defaultContext.getSpace(this.spaceID) 
			Thread::yield
		} while (this.physicSpace == null)
		this.physicSpace.register(asEventListener)
		this.myAdr = this.physicSpace.getAddress(owner.ID)   
	}
	
/*	override uninstall() {  
		var ^event = new InfluenceEvent(new KillInfluence)
		^event.source = this.myAdr
		this.physicSpace.emit(^event, new AddressUUIDScope(this.environmentID))
		this.physicSpace = null
	}*/
	
	override influenceKinematic(linearInfluence : Vector2f = null, angularInfluence : float = 0f,time : float = 0f) {
		
		var ^event = new MotionInfluence(time,linearInfluence,angularInfluence)
		^event.source = this.myAdr
		this.physicSpace.emit(^event, new AddressUUIDScope(this.environmentID))
	}
	
	override influenceAttack(time : float = 0f, target : UUID = null) {
		var ^event = new ShootInfluence (time, target)
		^event.source = this.myAdr
		this.physicSpace.emit(^event, new AddressUUIDScope(this.environmentID))
	}
	
}

skill DefaultMapManagerSkill implements MapManager {
	
	uses DefaultContextInteractions, Lifecycle
	
	val width : float
	val height : float
	val random : Random = new Random()
	
	var environment : Environment
	var GUI : Window
	
	new (width : float, height : float) {
			this.width = width
			this.height = height
	}
	
	override install {
		/**where is the constructor of the map according to its size? */
		this.environment = new Environment(this.width,this.height)
		GUI = new Window(this.environment)
	}
	 
	override getBodyCount : int {
		/** create a method to get size of the objectlist */
		 return this.environment.world.getBodyCount()
	}
	
	override resolveInfluences(actions : LinkedBlockingDeque<EnvironmentChangeQuery>) : boolean {
		while (actions.size() != 0){
			var change = actions.take()
			if(change.influenceType.equals(ConstantContainer.MOTION_TYPE)){
				if(getAgentBody(change.getEmitter) != null){
					var body = getAgentBody(change.getEmitter).getBody()
					var velocity = change.getVelocity
					var force = new Vec2(velocity.getX(),velocity.getY())
					body.setLinearVelocity(force)
				}
			}else if(change.influenceType.equals(ConstantContainer.SHOOT_TYPE)){
				if(getAgentBody(change.getEmitter) != null && getAgentBody(change.getTarget) != null){
					var body = getAgentBody(change.getEmitter)
					var target = getAgentBody(change.getTarget)
					target.takeDamage()
					body.getBody.setLinearVelocity(new Vec2(0,0))
				}
			}	
		}
		
		RunJbox // 1 step of simulation	
		
		false
	}

	/**
	 * calcul de toutes les perceptions -> utile seulement pour le général
	 */
 	override sendPerceptions(time : float) {
		
		for (body : this.environment.world.agentBodies) {
			
			
			var percevaibles = newArrayList
			var pos = body.position
			
			percevaibles = body.computePerception
			
			var perceptionEvent = new Perception(time,body.getId,percevaibles,pos,body)
//			System.out.printf("\nPerception de l'UUID : "+body.getId()+"\ntime: "+time+" position: " +pos);
//			System.out.printf("\nPercevaibles :\n");
//			for(per : percevaibles){
//				System.out.printf("object : "+per+"\n")
//			}
			var adr=defaultSpace.getAddress(body.getId)
			emit(perceptionEvent ,Scopes::addresses(adr))

		}
		
	}
	
	override getMapWidth : float {
		this.width
	}
	
	override getMapHeight : float {
		this.height
	}
	
	override getAllObjects : RTree {
		this.environment.world.getObjectList()
		
	}
	
	override getAgentBody(id : UUID) : AgentBody {
		
		this.environment.world.getAgentBody(id)
	}

	override createUnit(perceptionDistance : float, team : int) : AgentBody {
		var x : int
		var y : int
		if (team == 1 ){
			x = this.random.nextInt(ConstantContainer.RANDOM_SPAWN_X)
			y = this.random.nextInt(ConstantContainer.RANDOM_SPAWN_Y)
			x+=40
			y+=40
			while (!environment.world.canMoveInside(x, y)) {
				x = this.random.nextInt(ConstantContainer.RANDOM_SPAWN_X)
				y = this.random.nextInt(ConstantContainer.RANDOM_SPAWN_Y)
				x+=40
				y+=40
			}
		} else {
			x = this.random.nextInt(ConstantContainer.RANDOM_SPAWN_X)
			y = this.random.nextInt(ConstantContainer.RANDOM_SPAWN_Y)
			x+=100
			y+=100
			while (!environment.world.canMoveInside(x, y)) {
				x = this.random.nextInt(ConstantContainer.RANDOM_SPAWN_X)
				y = this.random.nextInt(ConstantContainer.RANDOM_SPAWN_Y)
				x+=100
				y+=100
			}
			
		}
		return this.environment.world.createBody(typeof(AgentBody),x,y,null,team,this.environment.getjBoxWorld(),perceptionDistance)
	
	}
	
	override createMapSurroundings {
		var id : UUID
		id = UUID.randomUUID()
		var objects = <EnvironmentObject>newArrayList()
		
		//Walls	
		objects.add(new StaticObject(32,152,32,48,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(7,52,7,52,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(42,168,42,32,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(77,190,77,10,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(167,72,33,72,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(155,48,45,48,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(100,18,100,18,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(1,100,2,200,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(100,1,200,2,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(199,100,2,200,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(100,199,200,2,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(86,189,86,1,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(192,189,8,1,id,environment.getjBoxWorld,environment.getWorld()))
		
		//Scenes
		id = UUID.randomUUID()
		var temp = new StaticObject(64,42,16,6,id,environment.getjBoxWorld,environment.getWorld())
		temp.setAsScene("Scene1")
		id = UUID.randomUUID()
		temp = new StaticObject(69,120,5,12,id,environment.getjBoxWorld,environment.getWorld())
		temp.setAsScene("Scene2")
		
		//Toilets
		id = UUID.randomUUID()
		temp = new StaticObject(17,78,5,10,id,environment.getjBoxWorld,environment.getWorld())
		temp.setAsToilet("Toilet1")
		id = UUID.randomUUID()
		temp = new StaticObject(131,120,5,10,id,environment.getjBoxWorld,environment.getWorld())
		temp.setAsToilet("Toilet2")
		
		//Drink Stands
		id = UUID.randomUUID()
		temp = new StaticObject(42,104,14,4,id,environment.getjBoxWorld,environment.getWorld())
		temp.setAsDrinkStand("Drink1")
		
		//Food Stands
		id = UUID.randomUUID()
		temp = new StaticObject(107,64,5,12,id,environment.getjBoxWorld,environment.getWorld())
		temp.setAsEatStand("Food1")
		
		//Gates
		id = UUID.randomUUID()
		temp = new StaticObject(178,189,6,1,id,environment.getjBoxWorld,environment.getWorld())
		temp.setAsGate("Gate")
		
		
		this.environment.addObjectToWorld(objects)
	}
	
	override RunJbox {
		this.environment.runJBox()
	}
	
	override updateWindow {
		
		this.GUI.updateWindow()
	}
	
	override printTree {
		this.environment.printMap()
	}
	 
	override updateTree {
		var agentToKill : ArrayList<UUID> = new ArrayList<UUID>()
		this.environment.updateTree(agentToKill)
		for(id : agentToKill){
			var adr=defaultSpace.getAddress(id)
			emit(new KillAgent,Scopes::addresses(adr))
			this.environment.getjBoxWorld.destroyBody(getAgentBody(id).getBody)
			this.environment.world.removeBody(id)
		}
	}
	
	override spawnAgent (spaceID : UUID, environmentID : UUID,agentType : Class<? extends Agent>,perceptionDistance : float,team : int) : UUID {
			var body = createUnit(perceptionDistance,team)
			var agentParameters : List<Object> = newArrayList(spaceID,environmentID)
			spawnInContextWithID(
			agentType,
			body.getId,
			defaultContext,
			agentParameters.toArray)
	}
	
	
	override SpawnButtonRequestA : boolean {
		if (!this.environment.getEventFire().isEmpty()){
 			if (this.environment.getEventFire().element().getUpdateAction.equals("SpawnA")){
 				this.environment.getEventFire().take()
 				return true
 			}
 			return false
 		}
 		return false
	}
	override SpawnButtonRequestB : boolean {
		if (!this.environment.getEventFire().isEmpty()){
 			if (this.environment.getEventFire().element().getUpdateAction.equals("SpawnB")){
 				this.environment.getEventFire().take()
 				return true
 			}
 			return false
 		}
 		return false
	}
	
	override test {
		if (this.environment.getEventFire().isEmpty()){
			this.environment.fireEnvironmentChanged(new EnvironmentEvent ("button","SpawnA"))
		}
	}
	
}

skill DefaultTimeManager implements TimeManager{
	var time = 0.0f
	var Dt = ConstantContainer.DELTA_T
	var beginTime : long		// the time when the cycle begun
    var timeDiff : long		// the time it took for the cycle to execute
    var sleepTime : long	// ms to sleep (<0 if we're behind)
	
	override startTimeCount{
		beginTime = System.currentTimeMillis()	
	}
	
	override TimeStep {
		time+=Dt;
	}
	
	override WaitUntilEndOfStep {
		timeDiff = System.currentTimeMillis() - beginTime
            sleepTime = ConstantContainer.FRAME_PERIOD - timeDiff

            if (sleepTime > 0) {
                try {
                    Thread.sleep(sleepTime);
                } catch (e : InterruptedException ) {}
            }else{
            	//retard
            }
	}
	
	override getTime : float {
		time
	}
	
}

skill VisitorDesire implements DesireManager{
	
	var currentDesire : Variation
	var	 actionMapping : HashMap<Actions, Variation>
	
	/**
	 * start value for the desires of a visitor in parameter (between 0 and 100)
	 */
	new(music : int,thirsty : int,hungry : int,pee : int){
		this.currentDesire = new Variation(music,thirsty,hungry,pee)
		
		actionMapping = new HashMap<Actions,Variation>();
		actionMapping.put(Actions.Drink,new Variation(10,-40,20,30));
		actionMapping.put(Actions.ListenMusic,new Variation(-1,1,1,1));
		actionMapping.put(Actions.Eat,new Variation(10,20,-40,10));
		actionMapping.put(Actions.Pee,new Variation(10,1,1,-50));
		actionMapping.put(Actions.Move,new Variation(1,0,0,1));
	}
	
	/**
	 * return a new variation that is the sum of all values
	 * @param var
	 * @return
	 */
	override addVariation(v : Variation) : Variation {
		
		return new Variation(currentDesire.music+v.music,currentDesire.thirsty+v.thirsty,currentDesire.hungry+v.hungry,currentDesire.pee+v.pee)

	}
	
	override applyVariation(actionToApply : Actions) {
		
		var change = actionMapping.get(actionToApply);
		currentDesire.music=change.music;
		currentDesire.hungry=change.hungry;
		currentDesire.thirsty=change.thirsty;
		currentDesire.pee=change.pee;
	}
	
	/**
	 * java code for now
	 */
	override chooseBestBasedOnAverageValue : Actions {
		
		var action = Actions.Move;
		var bestAverage = currentDesire.computeAverageValue
		var newAverage = this.addVariation(actionMapping.get(Actions.Drink)).computeAverageValue
		if(newAverage<bestAverage){
			action = Actions.Drink;
			bestAverage = newAverage;
		}
		newAverage = this.addVariation(actionMapping.get(Actions.Eat)).computeAverageValue;
		if(newAverage<bestAverage){
			action = Actions.Eat;
			bestAverage = newAverage;
		}
		newAverage = this.addVariation(actionMapping.get(Actions.Pee)).computeAverageValue;
		if(newAverage<bestAverage){
			action = Actions.Pee;
			bestAverage = newAverage;
		}
		
		return action;
		
	
	}
	
	/**
	 * 
	 */
	override computeAverageValue(values : Variation) : int {
		(values.music+values.thirsty+values.hungry+values.pee)/4
	}
	
}